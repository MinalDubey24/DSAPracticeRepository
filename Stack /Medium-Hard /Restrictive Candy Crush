// User function Template for Java

/*
    Note: Use StringBuilder/StringBuffer class for String concatenation(if any).
    While using String class, on each concatenation a new copy of the string is created,
   so that the overall complexity is O(n^2) . Fortunately in Java we could solve this
   with a StringBuffer/StringBuffer, which has O(1) complexity for each append.
*/

class Solution {
    public static String reduced_String(int k, String s) {
        // Your code goes here
        int count=0;
        
        if(k==1){
            return "";
        }
        Stack<Character> st= new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);
            
            if(st.size()==0){
                st.push(ch);
                count=1;
            }else{
                if(st.peek()==ch){
                    st.push(ch);
                    count++;
                    if(count==k){
                        int j=0;
                        while(j<k && st.peek()==ch){
                          st.pop();
                          j++;
                        }
                        count=1;
                    }
                }else{
                    st.push(ch);
                    count=1;
                }
            }
            
        }
        StringBuilder sb = new StringBuilder("");
        st.stream().forEach(c -> sb.append(c)); 
        //System.out.println(sb.toString());
        return sb.toString();
    }
}
